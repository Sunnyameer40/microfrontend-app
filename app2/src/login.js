(function(){var __webpack_modules__={312:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: ./src/main/webpack/login/components/flyout/js/flyout.js\nvar flyout = __webpack_require__(864);\n;// CONCATENATED MODULE: ./src/main/webpack/login/pages/sign-in/js/sign-in.js\nconst logouterror = 'bostonscientific.com/us/en/error.html';\nconst refreshTokenUrl = `https://bostonscientific-hcp.bsciewp.com/bsc/api/v1/users//refreshtoken`;\nconst initiateLoginUrl = 'https://bostonscientific-hcp.bsciewp.com/bsc/api/v1/users/initiatelogin';\nconst logoutUrl = 'https://bostonscientific-hcp.bsciewp.com/bsc/api/v1/users/logout';\nconst userInfoUrl = 'https://bostonscientific-hcp.bsciewp.com/bsc/api/v1/users/userinfo';\n\n\nlet loggedInUserName = '',\n  prefix = ''; // Define prefix here\n\n// Handle mobile flyout menu interactions\nconst handleFlyout = () => {\n  // Close menu dropdown in mobile for microsites\n  const microSitesDropdown = document.querySelector('.bsc-mobile-flyout-wrapper');\n  if (microSitesDropdown && microSitesDropdown.classList.contains('-open')) {\n    const closeButton = document.querySelector('.bsc-icon-menu-close');\n    if (closeButton) {\n      closeButton.click();\n    }\n  }\n\n  // Close menu dropdown in mobile for GWC sites\n  const gwcSitesDropdown = document.querySelector('.js-nav-menu');\n  if (gwcSitesDropdown && gwcSitesDropdown.classList.contains('open')) {\n    const toggleButton = document.querySelector('.js-nav-xs-toggle-btn');\n    if (toggleButton) {\n      toggleButton.click();\n    }\n  }\n\n  // Toggle the 'openFlyout' class\n  const flyoutCmp = document.querySelector('#bs-flyout-container > .cmp-container');\n  if (flyoutCmp) {\n    flyoutCmp.classList.toggle('openFlyout');\n  }\n};\n\nconst updateMyAccountButtonText = (isLoggedIn) => {\n  const myAccountButtons = document.querySelectorAll('.js-my-account');\n  if (myAccountButtons && myAccountButtons.length > 0) {\n    myAccountButtons.forEach((myAccountButton) => {\n      const spanElement = myAccountButton.querySelector('span');\n\n      if (spanElement) {\n        const unauthenticatedText = myAccountButton.getAttribute('data-unauthenticated-text');\n        const authenticatedText = myAccountButton.getAttribute('data-authenticated-text');\n        const text = isLoggedIn ? authenticatedText : unauthenticatedText;\n        spanElement.textContent = text;\n      }\n    });\n  }\n};\n\nconst getCookie = (name) => {\n  const cookies = document.cookie.split(';');\n\n  for (const cookie of cookies) {\n    const trimmedCookie = cookie.trim();\n    if (trimmedCookie.startsWith(name + '=')) {\n      const cookieValue = trimmedCookie.substring(name.length + 1);\n      return decodeURIComponent(cookieValue);\n    }\n  }\n\n  return null;\n};\n\nconst updateFlyoutWelcomeMsg = () => {\n  const userLoggedIn = getCookie('accessTokenExpiry');\n  const container = document.querySelector('#js-flyout-header');\n  if (userLoggedIn && container && loggedInUserName) {\n    const welcomeMessage = document.createElement('p');\n    welcomeMessage.className = 'bs-welcome-text';\n    welcomeMessage.textContent = prefix ? `Hi, ${prefix} ${loggedInUserName}` : `Hi, ${loggedInUserName}`;\n    container.parentElement.insertBefore(welcomeMessage, container);\n  }\n};\n\nconst toggleTextVisibility = (isLoggedIn) => {\n  const container = document.querySelector('#js-flyout-header');\n  if (container) {\n    container.classList.toggle('bs-hide', isLoggedIn);\n  }\n};\n\n/**\n * login\n */\nconst login = async () => {\n  try {\n\n    if (initiateLoginUrl) {\n      const response = await fetch(`https://bostonscientific-hcp.bsciewp.com/bsc/api/v1/users/initiatelogin`);\n      if (!response.ok) {\n        throw new Error(`Response status: ${response.status}`);\n      }\n\n      const jsonRes = await response.json();\n      if (jsonRes.redirect_url) {\n        window.location.href = jsonRes.redirect_url;\n      } else {\n        sessionStorage.setItem('errorState', 'true');\n        window.location.href = logouterror;\n      }\n    }\n  } catch (error) {\n    sessionStorage.setItem('errorState', 'true');\n    window.location.href = logouterror;\n  }\n};\n\nconst loginFlyout = () => {\n  const initialReferer = window.location.href;\n  localStorage.setItem('initialReferer', initialReferer);\n  login();\n};\n\nconst getIsSecurePage = () => {\n  const metaSecurePage = document.querySelector('meta[name=\"secure-page\"]');\n  const isSecurePage = metaSecurePage ? metaSecurePage.getAttribute('content') : null;\n  return isSecurePage;\n};\n\n// Function to handle user logout\nconst logout = async () => {\n  try {\n\n    if (logoutUrl) {\n      const response = await fetch(`/${logoutUrl}`);\n      if (response.ok) {\n        const jsonRes = await response.json();\n        const initialReferer = window.location.href;\n        localStorage.setItem('initialReferer', initialReferer);\n        const isSecurePage = getIsSecurePage();\n        if (isSecurePage && jsonRes.redirect_url) {\n          window.location.href = jsonRes.redirect_url;\n        } else {\n          window.location.reload();\n        }\n      } else if (response.status === 404 || response.status === 500) {\n        sessionStorage.setItem('errorState', 'true');\n        window.location.href = logouterror;\n      }\n    }\n  } catch (error) {\n    sessionStorage.setItem('errorState', 'true');\n    window.location.href = logouterror;\n  }\n};\n\n/**\n *\n */\nconst fetchUserInfo = async (isUserLoggedIn) => {\n  try {\n    if (isUserLoggedIn && userInfoUrl) {\n      const userInfoResponse = await fetch(`/${userInfoUrl}`);\n\n      if (userInfoResponse.ok) {\n        const userInfoJson = await userInfoResponse.json();\n        prefix = userInfoJson.prefix; // Set prefix value\n        loggedInUserName = userInfoJson.name; // Use the `name` property directly\n      } else if (response.status === 404 || response.status === 500) {\n        sessionStorage.setItem('errorState', 'true');\n        window.location.href = logouterror;\n      } else {\n        throw new Error(`Failed to fetch user info: ${userInfoResponse.status}`);\n      }\n    }\n    updateFlyoutWelcomeMsg();\n  } catch (error) {\n    sessionStorage.setItem('errorState', 'true');\n    window.location.href = logouterror;\n  }\n};\n\nfunction handleRedirect(isSecurePage, isUserLoggedIn) {\n  if (isSecurePage) {\n    const initialReferer = localStorage.getItem('initialReferer');\n    if (initialReferer) {\n      localStorage.removeItem('initialReferer');\n      window.open(initialReferer, '_self');\n    }\n  } else {\n    fetchUserInfo(isUserLoggedIn);\n  }\n}\n\nfunction handleResponse(response, isSecurePage, isUserLoggedIn) {\n  if (response.ok) {\n    handleRedirect(isSecurePage, isUserLoggedIn);\n  } else {\n    logout();\n  }\n}\n\nconst refreshTokenOnLoad = async (userLoggedIn) => {\n  try {\n    const isSecurePage = getIsSecurePage();\n    const accesTokenExpiryTime = getCookie('accessTokenExpiry');\n    if (accesTokenExpiryTime) {\n      const utcTimeString = decodeURIComponent(accesTokenExpiryTime).replace('j:\"', '').replace('\"', '');\n      const accessTokenTime = new Date(utcTimeString);\n      const currentTime = new Date();\n      if (accessTokenTime > currentTime) {\n        // The access token is still valid\n        fetchUserInfo(userLoggedIn);\n      } else {\n        // The access token has expired\n        const response = await fetch(`/${refreshTokenUrl}`);\n        handleResponse(response, isSecurePage, accesTokenExpiryTime);\n      }\n    }\n  } catch (error) {\n    logout();\n  }\n};\n\nwindow.bscLogin = {\n  attachHandlers: function () {\n    const userLoggedIn = getCookie('accessTokenExpiry');\n\n    // Update button text and flyout based on login status\n    updateMyAccountButtonText(userLoggedIn);\n    refreshTokenOnLoad(userLoggedIn);\n    toggleTextVisibility(userLoggedIn);\n    // Add event to the 'My Account' buttons both in desktop and mobile\n    const myAccountButtons = document.querySelectorAll('.js-my-account');\n    if (myAccountButtons && myAccountButtons.length > 0) {\n      myAccountButtons.forEach((button) => {\n        button.addEventListener('click', handleFlyout);\n      });\n    }\n\n    const flyoutCloseButtons = document.querySelectorAll('[data-testid=\"flyoutCloseBtn\"]');\n    if (flyoutCloseButtons && flyoutCloseButtons.length > 0) {\n      flyoutCloseButtons.forEach((button) => {\n        button.addEventListener('click', handleFlyout);\n      });\n    }\n\n    const userStatusBtns = document.querySelectorAll('#bs-flyout-container button[type=\"button\"]');\n\n    if (userStatusBtns.length > 0) {\n      const [signInBtn, signOutBtn] = userStatusBtns;\n\n      if (!userLoggedIn) {\n        signInBtn.addEventListener('click', loginFlyout);\n        signOutBtn.classList.toggle('bs-hide', true);\n      } else {\n        signOutBtn.addEventListener('click', logout);\n        signInBtn.classList.toggle('bs-hide', true);\n      }\n    }\n  }\n};\n\nconst referrerValue = getCookie('referrer');\n// secure page scenario\nif (window.location.href.includes('login.initiate.html') && referrerValue) {\n  localStorage.setItem('initialReferer', referrerValue);\n  login();\n}\n\n// access token expired scenario\nif (window.location.href.includes('login.refresh.html') && referrerValue) {\n  localStorage.setItem('initialReferer', referrerValue);\n}\n\n// Initialize event handlers\nbscLogin.attachHandlers();\n\n;// CONCATENATED MODULE: ./src/main/webpack/login/Analytics/self-service-analytics.js\nconst comp = window.comp || {};\ncomp.analytics = {};\ncomp.analytics = {\n  // ===================================\n  // Initialize Analytics for the self-service page\n  // ===================================\n  initSelfServiceAnalytics: function () {\n    //Sign-in or Sign-out btn click event\n    loginBtnStatus();\n  }\n};\n\nfunction initBtnAnalytics(btnLabel, domain) {\n  dataLayer.push({\n    event: 'interactionEvent',\n    eventCategory: `${domain} | all pages`,\n    event_description: 'flyout',\n    eventAction: 'click event | link click',\n    eventLabel: `${btnLabel}`\n  });\n}\n\nfunction loginBtnStatus() {\n  const currentDomain = window.location.hostname;\n  const userStatusBtn = document.querySelectorAll('#bs-flyout-container button[type=\"button\"]') || null;\n  const [signInBtn, signOutBtn] = userStatusBtn;\n  const btnStatus = document.querySelector('.bs-welcome-text');\n\n  if (userStatusBtn.length > 0 && currentDomain) {\n    const btnType = btnStatus ? signOutBtn : signInBtn;\n    const btnLabel = btnType.innerText.trim();\n    if (btnLabel) {\n      initBtnAnalytics(btnLabel, currentDomain);\n    }\n  }\n}\n\n/* harmony default export */ var self_service_analytics = (comp.analytics.initSelfServiceAnalytics);\n\n;// CONCATENATED MODULE: ./src/main/webpack/login/pages/callback/js/callback.js\n\n\nconst getAccessTokenUrl = `https://bostonscientific-hcp.bsciewp.com/generateaccesstoken`;\n/**\n * handles success state while fetching access token\n * @param result\n */\nconst handleSuccesState = () => {\n  const initialReferer = localStorage.getItem('initialReferer');\n  if (initialReferer) {\n    localStorage.removeItem('initialReferer');\n    window.open(initialReferer, '_self');\n  }\n};\n\n/**\n * handles error state while fetching access token\n */\nconst handleErrorState = () => {\n  const errorLoader = document.querySelector('#js-callback-error');\n  const successLoader = document.querySelector('#js-callback-loading');\n  if (errorLoader) {\n    errorLoader.classList.remove('bs-hide');\n    const signInBtn = errorLoader.querySelector('#error-links a[href=\"#\"]');\n    if (signInBtn) {\n      signInBtn.addEventListener('click', (e) => {\n        e.preventDefault();\n        login();\n      });\n    }\n  }\n  if (successLoader) {\n    successLoader.classList.add('bs-hide');\n  }\n};\n\n/**\n * get access and refresh token using authrization code\n * @param authCode\n * @returns sets access & refresh token\n */\nconst SSPGetAccessToken = async (authCode) => {\n  try {\n    if (getAccessTokenUrl) {\n      const response = await fetch(`https://bostonscientific-hcp.bsciewp.com/generateaccesstoken/${authCode}`);\n      if (response.ok) {\n        handleSuccesState();\n      } else {\n        handleErrorState();\n      }\n    }\n  } catch (e) {\n    handleErrorState();\n  }\n};\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst errorState = sessionStorage.getItem('errorState');\nif (errorState) {\n  handleErrorState();\n} else {\n  const errorLoader = document.querySelector('#js-callback-error');\n  if (errorLoader) {\n    errorLoader.classList.add('bs-hide');\n  }\n  const authCode = urlParams.get('code');\n  if (authCode) {\n    SSPGetAccessToken(authCode);\n  }\n}\n\n;// CONCATENATED MODULE: ./src/main/webpack/login/site/main.ts\n\n\n\n\n\n\n\n//# sourceURL=webpack://aem-maven-archetype/./src/main/webpack/login/site/main.ts_+_3_modules?")},864:function(){eval("const fetchFlyoutHtml = async (flyoutUrl) => {\n  try {\n    if (flyoutUrl) {\n      const response = await fetch(flyoutUrl);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const htmlString = await response.text();\n\n      if (htmlString) {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(htmlString, 'text/html');\n        const mainContent = doc.querySelector('.root');\n        attachFlyoutToPage(mainContent);\n\n        //maintain flyout component in body\n        const docCopy = parser.parseFromString(htmlString, 'text/html');\n        const copyContent = docCopy.querySelector('.root');\n        copyContent.classList.add('bs-flyout-html');\n        const bodyContainer = document.querySelector('.js-flyout-body-container');\n        if (bodyContainer) {\n          bodyContainer.appendChild(copyContent);\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Session validation error:', error);\n    // Logout the user and redirect to the callback page\n    await logout();\n    return false;\n  }\n};\n\nconst attachFlyoutToPage = (mainContent) => {\n  if (mainContent) {\n    mainContent.setAttribute('id', 'bs-flyout-container');\n  }\n  const tsContainer = document.querySelector('.js-flyout-container');\n  if (tsContainer) {\n    tsContainer.appendChild(mainContent);\n    window.bscLogin.attachHandlers();\n    window.bscLogin.validateSession();\n  }\n};\n\nwindow.bscLogin = window.bscLogin || {};\n\nwindow.bscLogin.appendFlyoutHtml = function () {\n  const flyoutCmp = document.querySelector('.bs-flyout-html');\n  if (flyoutCmp) {\n    attachFlyoutToPage(flyoutCmp);\n  } else {\n    const myAccountCTA = document.querySelector('.js-my-account');\n    if (myAccountCTA) {\n      const flyoutUrl = myAccountCTA.getAttribute('data-flyoutURL');\n      fetchFlyoutHtml(flyoutUrl);\n    }\n  }\n};\n\n\n//# sourceURL=webpack://aem-maven-archetype/./src/main/webpack/login/components/flyout/js/flyout.js?")}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];if(void 0!==e)return e.exports;var t=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](t,t.exports,__webpack_require__),t.exports}var __webpack_exports__=__webpack_require__(312)})();
